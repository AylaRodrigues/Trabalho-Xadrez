//Ayla Rodrigues e Douglas Mareli
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <windows.h>
#include <math.h>
#include "Listas.h"

#define PEAO    1
#define CAVALO  2
#define BISPO   3
#define TORRE   4
#define RAINHA  5
#define REI     6
#define MAX_NIVEL 5

struct Posicao {
    int qtdBrancas;
    struct Peca *brancas;
    int qtdPretas;
    struct Peca *pretas;
    int jogVez;
    struct Peca *tab[8][8];
};

void ResetCor() {
    printf("\033[0m");
}

void AjustaCor(int peca) {
    switch(abs(peca)){
    case PEAO: printf("\033[0;36m");break;
    case CAVALO: printf("\033[1;33m");break;
    case BISPO: printf("\033[0;35m");break;
    case TORRE: printf("\033[0;32m");break;
    case RAINHA: printf("\033[0;34m");break;
    case REI: printf("\033[1;31m");break;
    }
}
      
void DesenhaTabuleiro(struct Posicao atual) {
    system("cls");
    Sleep(500);
    
    printf("    +---+---+---+---+---+---+---+---+\n");
    for (int i=7;i>=0;i--){
        printf("%d   |",i+1);
        for (int j=0;j<8;j++){
            
            if (atual.tab[i][j]!=NULL)
            {
                AjustaCor(atual.tab[i][j]->codigo);
                if(atual.tab[i][j]->codigo<0)
                {
                    printf("%d",atual.tab[i][j]->codigo);
                }else
                {
                    printf(" %d",atual.tab[i][j]->codigo);
                }
            }else{
                printf("  ");
            }
            ResetCor();
            printf(" |");
        }
        printf("\n    +---+---+---+---+---+---+---+---+\n");
    }
    printf("      1   2   3   4   5   6   7   8 \n");
    
    printf("\n\n Negativo = pretas; Positivo = brancas\n 1= Peão; 2= Cavalo; 3= Bispo;\n 4= Torre; 5= Dama; 6= Rei;\n\n");
}

void *CalculaPeao(struct Jogada *lista,int linha,int coluna,struct Posicao posAtual) {
    int peca = posAtual.tab[linha][coluna]->codigo;
    
    if (linha+peca>=0 && linha+peca<=7 ){//não está na primeira nem na última linha
        if (posAtual.tab[linha+peca][coluna] == NULL){ //pode avancar
            InsereJogada(lista,linha+peca,coluna,linha,coluna);
        }
        
        if(linha == 1 || linha == 6 && posAtual.tab[linha+2*peca][coluna] == NULL){
            InsereJogada(lista,linha+2*peca,coluna,linha,coluna);
        }
        
        if (posAtual.tab[linha+peca][coluna-1]!=NULL) {
        
            if (coluna>0 && posAtual.tab[linha+peca][coluna-1]->codigo*peca<0){ //verificar captura na esquerda
                InsereJogada(lista,linha+peca,coluna-1,linha,coluna); 
                posAtual.tab[linha+peca][coluna-1]->ataques++;
            } 
        }
        
		if (posAtual.tab[linha+peca][coluna+1] != NULL) {
            
            if (coluna<7 && posAtual.tab[linha+peca][coluna+1]->codigo*peca<0){//verificar captura na direita
                InsereJogada(lista,linha+peca,coluna+1,linha,coluna);
                posAtual.tab[linha+peca][coluna+1]->ataques++; 
            }  
       }
    }
}

void *CalculaCavalo(struct Jogada *lista, int linha, int coluna,struct Posicao posAtual) {
    int peca = posAtual.tab[linha][coluna]->codigo;
    
    if (linha<6){ //duas linhas acima
        if (coluna<7 && posAtual.tab[linha+2][coluna+1] == NULL){ //direita
            InsereJogada(lista, linha+2, coluna+1,linha,coluna); 
        }else if(coluna<7 && (posAtual.tab[linha+2][coluna+1]->codigo)*peca<0){
            InsereJogada(lista, linha+2, coluna+1,linha,coluna);
            posAtual.tab[linha+2][coluna+1]->ataques++; 
        }
        
        if (coluna>0 && posAtual.tab[linha+2][coluna-1] == NULL){ //esquerda
            InsereJogada(lista,linha+2,coluna-1,linha,coluna); 
        }else if(coluna>0 && (posAtual.tab[linha+2][coluna-1]->codigo)*peca<0){
            InsereJogada(lista,linha+2,coluna-1,linha,coluna);
            posAtual.tab[linha+2][coluna-1]->ataques++;
        }
    }
    if (linha<7){//uma linha acima
        if (coluna<6 && posAtual.tab[linha+1][coluna+2] == NULL){ //duas casas à direita
            InsereJogada(lista,linha+1,coluna+2,linha,coluna);          
        }else if(coluna<6 && (posAtual.tab[linha+1][coluna+2]->codigo)*peca<0){
            InsereJogada(lista,linha+1,coluna+2,linha,coluna);
            posAtual.tab[linha+1][coluna+2]->ataques++;
        }
        
        if (coluna>1 && posAtual.tab[linha+1][coluna-2]== NULL){ //duas casas à esquerda
            InsereJogada(lista,linha+1,coluna-2,linha,coluna);             
        }else if (coluna>1 && (posAtual.tab[linha+1][coluna-2]->codigo)*peca<0) {
            InsereJogada(lista,linha+1,coluna-2,linha,coluna);
            posAtual.tab[linha+1][coluna-2]->ataques++;
        }
    }
    if (linha>1){ //duas linhas abaixo
        if (coluna<7 && posAtual.tab[linha-2][coluna+1] == NULL){ //direita
            InsereJogada(lista,linha-2,coluna+1,linha,coluna);             
        }else if (coluna<7 && (posAtual.tab[linha-2][coluna+1]->codigo)*peca<0) {
            InsereJogada(lista,linha-2,coluna+1,linha,coluna);
            posAtual.tab[linha-2][coluna+1]->ataques++;
        }
        
        if (coluna>0 && posAtual.tab[linha-2][coluna-1] == NULL){ //esquerda
            InsereJogada(lista,linha-2,coluna-1,linha,coluna); 
        }else if (coluna>0 && (posAtual.tab[linha-2][coluna-1]->codigo)*peca<0){
            InsereJogada(lista,linha-2,coluna-1,linha,coluna);
            posAtual.tab[linha-2][coluna-1]->ataques++;
        }
    }
    if (linha>0){//uma linha abaixo
        if (coluna<6 && posAtual.tab[linha-1][coluna+2] == NULL){ //duas casas à direita
            InsereJogada(lista,linha-1,coluna+2,linha,coluna); 
        }else if (coluna<6 && (posAtual.tab[linha-1][coluna+2]->codigo)*peca<=0) {
            InsereJogada(lista,linha-1,coluna+2,linha,coluna); 
            posAtual.tab[linha-1][coluna+2]->ataques++;
        }
        
        if (coluna>1 &&posAtual.tab[linha-1][coluna-2] == NULL){ //duas casas à esquerd
            InsereJogada(lista,linha-1,coluna-2,linha,coluna); 
        }else if (coluna>1 && (posAtual.tab[linha-1][coluna-2]->codigo)*peca<=0) {
            InsereJogada(lista,linha-1,coluna-2,linha,coluna); 
            posAtual.tab[linha-1][coluna-2]->ataques++;
        }
    }
}

void *CalculaBispo(struct Jogada *lista, int linha, int coluna,struct Posicao posAtual) {
    int peca = posAtual.tab[linha][coluna]->codigo;
    int k=0;
    
    do{//diagonal superior direita
        k++;
        if (linha+k<8 && coluna+k<8 && posAtual.tab[linha+k][coluna+k] == NULL){
            InsereJogada(lista,linha+k,coluna+k, linha, coluna);
        }else if(linha+k<8 && coluna+k<8 && posAtual.tab[linha+k][coluna+k]->codigo*peca<0){
            InsereJogada(lista,linha+k,coluna+k, linha, coluna);
            posAtual.tab[linha+k][coluna+k]->ataques++;
        }
    }while (linha+k<8 && coluna+k<8 && posAtual.tab[linha+k][coluna+k]==NULL);

    k=0;
    do{//diagonal superior esquerda
        k++;
        if (linha+k<8 && coluna-k>=0 && posAtual.tab[linha+k][coluna-k] == NULL){
            InsereJogada(lista,linha+k,coluna-k, linha, coluna); 
        }else if (linha+k<8 && coluna-k>=0 && posAtual.tab[linha+k][coluna-k]->codigo*peca<0 ) {
            InsereJogada(lista,linha+k,coluna-k, linha, coluna);
            posAtual.tab[linha+k][coluna-k]->ataques++;
        }
    }while (linha+k<8 && coluna-k>=0 && posAtual.tab[linha+k][coluna-k]==NULL);

    k=0;
    do{//diagonal inferior direita
        k++;
        
        if (linha-k>=0 && coluna+k<8 && posAtual.tab[linha-k][coluna+k] == NULL){
            InsereJogada(lista,linha-k,coluna+k, linha, coluna);
        }else if(linha-k>=0 && coluna+k<8 && posAtual.tab[linha-k][coluna+k]->codigo*peca<0) {
            InsereJogada(lista,linha-k,coluna+k, linha, coluna);
            posAtual.tab[linha-k][coluna+k]->ataques++;
        }
    }while (linha-k>=0 && coluna+k<8 && posAtual.tab[linha-k][coluna+k]==NULL);

    k=0;
    do{//diagonal inferior direita
        k++;
        if (linha-k>=0 && coluna-k>=0 && posAtual.tab[linha-k][coluna-k] == NULL){
            InsereJogada(lista,linha-k,coluna-k, linha, coluna); 
        }else if (linha-k>=0 && coluna-k>=0 && posAtual.tab[linha-k][coluna-k]->codigo*peca<0) {
            InsereJogada(lista,linha-k,coluna-k, linha, coluna); 
            posAtual.tab[linha-k][coluna-k]->ataques++;
        }
    }while (linha-k>=0 && coluna-k>=0 && posAtual.tab[linha-k][coluna-k]==NULL);
    
}

void *CalculaTorre(struct Jogada *lista,int linha,int coluna,struct Posicao posAtual) {
    
    int peca = posAtual.tab[linha][coluna]->codigo;
    int k=0;

    do{//coluna acima
        k++;
        if (linha+k<8 && posAtual.tab[linha+k][coluna] == NULL){
            InsereJogada(lista,linha+k,coluna,linha,coluna);
        }else if (linha+k<8 && posAtual.tab[linha+k][coluna]->codigo*peca<0) {
            InsereJogada(lista,linha+k,coluna,linha,coluna);
            posAtual.tab[linha+k][coluna]->ataques++;
        }
    }while(linha+k<8 && posAtual.tab[linha+k][coluna]==NULL);
    
    k=0;
    do{//coluna abaixo
        k++;
        if (linha-k>=0 && posAtual.tab[linha-k][coluna]== NULL){
            InsereJogada(lista,linha-k,coluna,linha,coluna);
        }else if (linha-k>=0 && posAtual.tab[linha-k][coluna]->codigo*peca<0){
            InsereJogada(lista,linha-k,coluna,linha,coluna);
            posAtual.tab[linha-k][coluna]->ataques++;
        }
    }while(linha-k>=0 && posAtual.tab[linha-k][coluna]==NULL);

    k=0;
    do{//linha direita
        k++;
        if (coluna+k<8 && posAtual.tab[linha][coluna+k] == NULL){
            InsereJogada(lista,linha,coluna+k,linha,coluna);
        }else if (coluna+k<8 && posAtual.tab[linha][coluna+k]->codigo*peca<0){
            InsereJogada(lista,linha,coluna+k,linha,coluna);
            posAtual.tab[linha][coluna+k]->ataques++;
        }
    }while(coluna+k<8 && posAtual.tab[linha][coluna+k]==NULL);

    k=0;
    do{//linha esquerda
        k++;
        if (coluna-k>=0 && posAtual.tab[linha][coluna-k] == NULL){
            InsereJogada(lista,linha,coluna-k,linha,coluna);
        }else if(coluna-k>=0 && posAtual.tab[linha][coluna-k]->codigo*peca<=0) {
            InsereJogada(lista,linha,coluna-k,linha,coluna);
            posAtual.tab[linha][coluna-k]->ataques++;
        }
    }while(coluna-k>=0 && posAtual.tab[linha][coluna-k]==NULL);
}

void *CalculaRei(struct Jogada *lista, int linha, int coluna,struct Posicao posAtual) {
    
    int peca = posAtual.tab[linha][coluna]->codigo;
    
    if (linha<7){//linha de cima
        if (posAtual.tab[linha+1][coluna]== NULL){//mesma coluna
            InsereJogada(lista,linha+1,coluna, linha, coluna); 
        }else if (posAtual.tab[linha+1][coluna]->codigo*peca<0) {
            InsereJogada(lista,linha+1,coluna, linha, coluna);
            posAtual.tab[linha+1][coluna]->ataques++;
        }
        
        if (posAtual.tab[linha+1][coluna+1] == NULL){//superior direita
            InsereJogada(lista,linha+1,coluna+1, linha, coluna); 
        }else if (coluna<7 && posAtual.tab[linha+1][coluna+1]->codigo*peca<0){
            InsereJogada(lista,linha+1,coluna+1, linha, coluna); 
            posAtual.tab[linha+1][coluna+1]->ataques++;
        }
        
        if (posAtual.tab[linha+1][coluna-1] == NULL){//superior esquerda
            InsereJogada(lista,linha+1,coluna-1, linha, coluna); 
        }else if (coluna>=0 && posAtual.tab[linha+1][coluna-1]->codigo*peca<0) {
            InsereJogada(lista,linha+1,coluna-1, linha, coluna);
            posAtual.tab[linha+1][coluna-1]->ataques++;
        }
    }

    if (linha>0){//linha de baixo
        if (posAtual.tab[linha-1][coluna] == NULL){//mesma coluna
            InsereJogada(lista,linha-1,coluna, linha, coluna); 
        }else if (posAtual.tab[linha-1][coluna]->codigo*peca<0) {
            InsereJogada(lista,linha-1,coluna, linha, coluna);
            posAtual.tab[linha-1][coluna]->ataques++;
        }
        
        if (coluna<7 && posAtual.tab[linha-1][coluna+1]== NULL){//inferior direita
            InsereJogada(lista,linha-1,coluna+1, linha, coluna); 
        }else if (coluna<7 && posAtual.tab[linha-1][coluna+1]->codigo*peca<0 ) {
            InsereJogada(lista,linha-1,coluna+1, linha, coluna); 
            posAtual.tab[linha-1][coluna+1]->ataques++;
        }
        
        if (coluna>=0 && posAtual.tab[linha-1][coluna-1] == NULL ){//inferior esquerda
            InsereJogada(lista,linha-1,coluna-1, linha, coluna); 
        }else if (coluna>=0 && posAtual.tab[linha-1][coluna-1]->codigo*peca<0) {
            InsereJogada(lista,linha-1,coluna-1, linha, coluna); 
            posAtual.tab[linha-1][coluna-1]->ataques++;
        }
    }

    if (coluna<7 && posAtual.tab[linha][coluna+1] == NULL ){ //mesma linha, casa da direita
        InsereJogada(lista,linha,coluna+1, linha, coluna); 
    }else if (coluna<7 && posAtual.tab[linha][coluna+1]->codigo*peca<0) {
        InsereJogada(lista,linha,coluna+1, linha, coluna);
        posAtual.tab[linha][coluna+1]->ataques++; 
    }

    if (coluna>0 && posAtual.tab[linha][coluna-1] == NULL){ //mesma linha, casa da esquerda
        InsereJogada(lista,linha,coluna-1, linha, coluna); 
    }else if (coluna>0 && posAtual.tab[linha][coluna-1]->codigo*peca<0) {
        InsereJogada(lista,linha,coluna-1, linha, coluna); 
        posAtual.tab[linha][coluna-1]->ataques++;
    }
}

void LiberaMemoria(struct Posicao *posicao) {
    posicao->brancas = DestroiListaPeca(posicao->brancas);
    posicao->pretas = DestroiListaPeca(posicao->pretas);
}

struct Posicao IniciaTabuleiro() {
    struct Posicao posInicial;
    
    posInicial.brancas = CriaListaPeca();
    posInicial.pretas = CriaListaPeca(); 
    
    for (int i=0;i<8;i++)
        for (int j=0;j<8;j++)
            if (i==1)
            {
                posInicial.tab[i][j] = InserePeca(posInicial.brancas,PEAO,i,j);
            }else if (i==6)
            {
                posInicial.tab[i][j] = InserePeca(posInicial.pretas,-PEAO,i,j);
                
            }else
            { 
                posInicial.tab[i][j]=NULL;//outras casas
            }
            
    //[0][0] =[0][7] = -TORRE;//torres brancas
    posInicial.tab[0][0] = InserePeca(posInicial.brancas,TORRE,0,0); 
    posInicial.tab[0][7] = InserePeca(posInicial.brancas,TORRE,0,7); 
    
    //[7][0] =[7][7] = -TORRE;//torres pretas
    posInicial.tab[7][0] = InserePeca(posInicial.pretas,-TORRE,7,0);
    posInicial.tab[7][7] = InserePeca(posInicial.pretas,-TORRE,7,7);
    
   //[0][1] = [0][6] = CAVALO; //cavalos brancos
    posInicial.tab[0][1] = InserePeca(posInicial.brancas,CAVALO,0,1); 
    posInicial.tab[0][6] = InserePeca(posInicial.brancas,CAVALO,0,6); 
    
    //[7][1] = [7][6] = -CAVALO;//cavalos pretos
    posInicial.tab[7][1] = InserePeca(posInicial.pretas,-CAVALO,7,1);
    posInicial.tab[7][6] = InserePeca(posInicial.pretas,-CAVALO,7,6);
    
    //[0][2] = [0][5] = BISPO;//bispos brancos
    posInicial.tab[0][2] = InserePeca(posInicial.brancas,BISPO,0,2); 
    posInicial.tab[0][5] = InserePeca(posInicial.brancas,BISPO,0,5); 
    
    //[7][2] = [7][5] = -BISPO;//bispos pretos
    posInicial.tab[7][2] = InserePeca(posInicial.pretas,-BISPO,7,2);
    posInicial.tab[7][5] = InserePeca(posInicial.pretas,-BISPO,7,5);
    
    //[0][3] = RAINHA;//rainha branca
    posInicial.tab[0][3] = InserePeca(posInicial.brancas,RAINHA,0,3);

    //[0][4] = REI;//rei branco
    posInicial.tab[0][4] = InserePeca(posInicial.brancas,REI,0,4);
    
    //[7][3] = -RAINHA;//rainha preta
    posInicial.tab[7][3] = InserePeca(posInicial.pretas,-RAINHA,7,3);
    
    //[7][4] = -REI;//rei preto
    posInicial.tab[7][4] = InserePeca(posInicial.pretas,-REI,7,4);
    
    posInicial.qtdPretas=16;
    posInicial.qtdBrancas=16;
    posInicial.jogVez = 1;
    
    return posInicial;
}

struct Posicao CopiaPosicao(struct Posicao original,struct Posicao copia){
    
    copia.jogVez = original.jogVez;
    copia.qtdBrancas = original.qtdBrancas;
    copia.qtdPretas = original.qtdPretas;
    
    copia.brancas = CriaListaPeca();
    copia.pretas = CriaListaPeca();
    
    for(int i = 0; i < 8; i++) {
        for(int j =0; j < 8; j++) {
            if (original.tab[i][j] == NULL) {
                copia.tab[i][j] = NULL;
            }else if (original.tab[i][j]->codigo<0){
                copia.tab[i][j] = InserePeca(copia.pretas,original.tab[i][j]->codigo,i,j);
            }else {
                copia.tab[i][j] = InserePeca(copia.brancas,original.tab[i][j]->codigo,i,j);
            }
        }
    }
    
    return copia;
}

int ExecutaJogada(struct Jogada jog, struct Posicao *posAtual) {

    int x=0;
    struct Peca *peca = posAtual->tab[jog.deLinha][jog.deColuna];

    posAtual->tab[jog.deLinha][jog.deColuna] = NULL; //retira a peça do ligar

    if (posAtual->tab[jog.paraLinha][jog.paraColuna]!=NULL){ //a peça fará uma captura
        if (abs(posAtual->tab[jog.paraLinha][jog.paraColuna]->codigo)==REI) //rei capturado
            x=1;

        RemovePeca(posAtual->tab[jog.paraLinha][jog.paraColuna]); //retira a peça que foi capturada da sua lista
        if (posAtual->jogVez==1)
            posAtual->qtdPretas--; //capturou peça preta
        else posAtual->qtdBrancas--;//capturou peça branca
    }

    posAtual->tab[jog.paraLinha][jog.paraColuna] = peca;
    peca->linha = jog.paraLinha;
    peca->coluna = jog.paraColuna;
    
    if(abs(peca->codigo) == PEAO){
		if(peca->linha == 7){
			peca->codigo = RAINHA;
		}else if (peca->linha == 0){
			peca->codigo = -RAINHA;
		}
	}
	
	posAtual->jogVez = -posAtual->jogVez;
    return x;
}

struct Jogada *CalculaMovimentosPossiveis(struct Posicao posAtual) {
    struct Jogada *jogadas = CriaListaJogada();  
    struct Peca *aux;
    struct Peca *inicio;
    
    if(posAtual.jogVez == 1){
        aux = posAtual.brancas->prox;
        inicio = posAtual.brancas;
    }else {
        aux = posAtual.pretas->prox;
        inicio = posAtual.pretas;
    }
    
    while(aux!=inicio)
        {
            aux->ataques = 0;
            switch(abs(aux->codigo))
            {
                case PEAO: CalculaPeao(jogadas,aux->linha,aux->coluna,posAtual); break;
                case CAVALO: CalculaCavalo(jogadas,aux->linha,aux->coluna,posAtual); break;
                case BISPO: CalculaBispo(jogadas,aux->linha,aux->coluna,posAtual); break;
                case TORRE: CalculaTorre(jogadas,aux->linha,aux->coluna,posAtual); break;
                case RAINHA: CalculaTorre(jogadas,aux->linha,aux->coluna,posAtual);
                            CalculaBispo(jogadas,aux->linha,aux->coluna,posAtual);
                            break;
                case REI: CalculaRei(jogadas,aux->linha,aux->coluna,posAtual); break;
            }
            aux=aux->prox;
        }
         
    return jogadas;
}

double AvaliaPosicao(struct Posicao pos) {
	
	double valorBranca = 0, valorPreta = 0, avaliacao;

	struct Peca *aux = pos.brancas->prox;
	while(aux!=pos.brancas){
		if(aux->codigo == 1) {
			valorBranca = valorBranca + (abs(0 - aux->linha)*0.05) +1;
		}
		switch(aux->codigo) {
			case CAVALO: valorBranca = valorBranca+3.2; 
						valorPreta = valorPreta + aux->ataques*3.2; break;
			case BISPO: valorBranca = valorBranca+3.33; 
						valorPreta = valorPreta + aux->ataques*3.33; break;
			case TORRE: valorBranca = valorBranca+5.1; 
						valorPreta = valorPreta + aux->ataques*5.1; break;
			case RAINHA: valorBranca = valorBranca+8.8; 
						valorPreta = valorPreta + aux->ataques*8.8; break;
			case REI: valorBranca = valorBranca+100; 
						valorPreta = valorPreta + aux->ataques*100; break;
		}
		
		aux = aux->prox;
	}
	
	aux = pos.pretas->prox;
	while(aux!=pos.pretas) {
		if(aux->codigo == -1) {
		valorPreta = valorPreta + ((7 - aux->linha)*0.05) + 1; 
		}
		switch(aux->codigo) {
			case -CAVALO: valorPreta = valorPreta+3.2; 
						valorBranca = valorBranca + aux->ataques*3.2; break;
			case -BISPO: valorPreta = valorPreta+3.33; 
						valorBranca = valorBranca + aux->ataques*3.33; break;
			case -TORRE: valorPreta = valorPreta+5.1; 
						valorBranca = valorBranca + aux->ataques*5.1; break;
			case -RAINHA: valorPreta =valorPreta+8.8; 
						valorBranca = valorBranca + aux->ataques*8.8; break;
			case -REI: valorPreta = valorPreta+100; 
						valorBranca = valorBranca + aux->ataques*100; break;
		}
		aux = aux->prox;
	}
	
	avaliacao = valorPreta - valorBranca;
	 
	return avaliacao;
}

struct Jogada ExecutaIA(struct Posicao pos,int nivel, double alfa, double beta){
	struct Jogada *lista,*jogadaAux,*listaBrancas,*listaPretas;
	struct Jogada melhorJogada, jogadaIA;
	struct Posicao posCopia;
	double melhorValor, valorJogada;
	int podado = 0;
	
	if(nivel % 2 == 0) {
		melhorValor = -INFINITY;
	}else {
		melhorValor = INFINITY;
	}
	
	if(pos.jogVez == 1) {
		pos.jogVez = pos.jogVez * -1;
	} 
		listaPretas = CalculaMovimentosPossiveis(pos);
		pos.jogVez = pos.jogVez * -1;
		listaBrancas = CalculaMovimentosPossiveis(pos);
		
	
	if(nivel % 2 == 0) {
		lista = listaPretas;
	} else {
		lista = listaBrancas;
	}
	
	jogadaAux = lista->prox;
	
	while(jogadaAux != lista && podado == 0) {
		posCopia = CopiaPosicao(pos,posCopia);
		ExecutaJogada(*jogadaAux,&posCopia);
		
		if(nivel < MAX_NIVEL) {
			
			if (nivel % 2 == 0) {
				jogadaIA = ExecutaIA(posCopia,nivel+1,melhorValor,beta);
			}else{
				jogadaIA = ExecutaIA(posCopia,nivel+1,alfa,melhorValor);
			}
			
			ExecutaJogada(jogadaIA,&posCopia);
		}
		
		valorJogada = AvaliaPosicao(posCopia);
		
		if(valorJogada < alfa || valorJogada > beta) {
			podado = 1;
		}
		
		if(nivel % 2 == 0 && valorJogada >= melhorValor) {
			melhorValor = valorJogada;
			melhorJogada = *jogadaAux;
		}else if(nivel % 2 != 0 && valorJogada <= melhorValor) {
			melhorValor = valorJogada;
			melhorJogada = *jogadaAux;
		}
		
		jogadaAux = jogadaAux->prox;
		LiberaMemoria(&posCopia);
	}
	
	listaBrancas = DestroiJogadas(listaBrancas);
	listaPretas = DestroiJogadas(listaPretas);
	
	
	return melhorJogada;
}

void SalvaJogada(FILE *arq, struct Jogada *jogada){
    
    if(jogada == NULL) {
    	arq = fopen("jogadas.bin","wb");
	}else {
		arq = fopen("jogadas.bin","wb");
		fwrite(&jogada->deLinha,sizeof(int),1,arq);
		fwrite(&jogada->deColuna,sizeof(int),1,arq);
		fwrite(&jogada->paraLinha,sizeof(int),1,arq);
		fwrite(&jogada->paraColuna,sizeof(int),1,arq);
	}
	
	fclose(arq);
}

int main() {
	
    setlocale(LC_ALL,"");
    FILE *jogadasSalvas;
    int fimDeJogo=0;
    char iniciar[10];
    struct Jogada *jogadas = NULL;
    struct Posicao posAtual;

	SalvaJogada(jogadasSalvas,jogadas);
	
    printf("---------- Bem vindo! ----------\n");
    printf("> Pronto para vencer Beth Harmon?\n\n\nDigite 'pronto' para gerar o tabuleiro!\n");
    scanf("%s",iniciar);
    
    if(strcmp(iniciar,"pronto") ==0){
        posAtual = IniciaTabuleiro();
        DesenhaTabuleiro(posAtual);
    }
    
    struct Jogada escolhida;
    while (fimDeJogo==0) {
    	
    	if(posAtual.jogVez == 1) {
	        jogadas=CalculaMovimentosPossiveis(posAtual);
	        escolhida = BuscaJogada(jogadas);
	        DestroiJogadas(jogadas);
        }else {
        	escolhida = ExecutaIA(posAtual,0,-INFINITY,INFINITY);
		}
		
		SalvaJogada(jogadasSalvas,&escolhida);
		
        fimDeJogo = ExecutaJogada(escolhida,&posAtual);
        DesenhaTabuleiro(posAtual);
	}		
    
    if(posAtual.jogVez == 1) {	
		printf("\n----- VITÓRIA DAS PRETAS -----\n");
    }else {
		printf("\n----- VITÓRIA DAS BRANCAS -----\n");
	}
    
    
    LiberaMemoria(&posAtual);
    
    return 0;
}
