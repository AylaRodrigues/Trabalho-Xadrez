//Ayla Rodrigues e Douglas Mareli
//Eu vencerei Beth Harmon
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <locale.h>
#include <windows.h>

#define PEAO    1
#define CAVALO  2
#define BISPO   3
#define TORRE   4
#define RAINHA  5
#define REI     6

struct Jogada{
    int deLinha,deColuna,paraLinha,paraColuna;
    struct Jogada *prox,*ant;
};

struct Peca{
	int codigo,linha,coluna,ataques;
	struct Peca *prox,*ant;
};

struct Posicao{
	int qtdBrancas;
	struct Peca *brancas;
	int qtdPretas;
	struct Peca *pretas;
	int jogVez;
	struct Peca *tab[8][8];
};

void ResetCor(){
    printf("\033[0m");
}

void AjustaCor(int peca){
    switch(abs(peca)){
    case PEAO: printf("\033[0;36m");break;
    case CAVALO: printf("\033[1;33m");break;
    case BISPO: printf("\033[0;35m");break;
    case TORRE: printf("\033[0;32m");break;
    case RAINHA: printf("\033[0;34m");break;
    case REI: printf("\033[1;31m");break;
    }
}

struct Peca *CriaListaPeca(){
	struct Peca *sentinela=(struct Peca *)malloc(sizeof(struct Peca));
	sentinela->prox=sentinela;
	sentinela->ant=sentinela;
	return sentinela;
}

struct Peca *CriaPeca(int codigo, int linha, int coluna){
	struct Peca *resp = (struct Peca *) malloc(sizeof(struct Peca));
	resp->codigo = codigo;
	resp->linha=linha;
	resp->coluna=coluna;
	resp->ant = NULL;
	resp->prox = NULL;

	return resp;
}

void *InserePeca(struct Peca *lista,int codigo, int linha, int coluna,struct Posicao *posicao){
	struct Peca *novo = CriaPeca(codigo,linha,coluna);
	novo->prox=lista;
	novo->ant=lista->ant;
	lista->ant->prox=novo;
	lista->ant=novo;
	posicao->tab[linha][coluna]=novo;
	
}

struct Jogada *CriaListaJogada(){
	struct Jogada *sentinela =(struct Jogada *)malloc(sizeof(struct Jogada));
	sentinela->prox = sentinela;
	sentinela->ant = sentinela;
	return sentinela;
}

struct Jogada *CriaJogada(int deLinha, int deColuna, int paraLinha, int paraColuna){
    struct Jogada *jog =(struct Jogada *)malloc(sizeof(struct Jogada));
	jog->deLinha = deLinha;
	jog->deColuna = deColuna;
	jog->paraLinha = paraLinha;
	jog->paraColuna = paraColuna;
    jog->prox = NULL;
    jog->ant = NULL;
    
    return jog;
}

void *InsereJogada(struct Jogada *lista,int paraLinha,int paraColuna,int deLinha,int deColuna){
	struct Jogada *novo = CriaJogada(deLinha,deColuna,paraLinha,paraColuna);
	novo->prox=lista;
	novo->ant=lista->ant;
	lista->ant->prox=novo;
	lista->ant=novo;
	
}

void *BuscaJogada(struct Jogada *lista,int paraLinha,int paraColuna,int deLinha,int deColuna){
	struct Jogada *aux = lista->prox;
	while(aux != lista && (aux->deLinha != deLinha || aux->deColuna != deColuna || aux->paraLinha !=paraLinha || aux->paraColuna !=paraColuna)){
		aux= aux->prox;
	}
		if(aux!=lista){
			return aux;
		}else{
			return NULL;
		}
	}	

struct Posicao IniciaTabuleiro(){
    struct Posicao posInicial;
    
    posInicial.brancas = CriaListaPeca();
	posInicial.pretas = CriaListaPeca(); 
	
    for (int i=0;i<8;i++)
        for (int j=0;j<8;j++)
            if (i==1)
			{
				InserePeca(posInicial.brancas,PEAO,i,j,&posInicial);
            }else if (i==6)
			{
                InserePeca(posInicial.pretas,-PEAO,i,j,&posInicial);
                
            }else
			{ 
				posInicial.tab[i][j]=NULL;//outras casas
			}
			
	//[0][0] =[0][7] = -TORRE;//torres brancas
    InserePeca(posInicial.brancas,TORRE,0,0,&posInicial); 
	InserePeca(posInicial.brancas,TORRE,0,7,&posInicial); 
	
    //[7][0] =[7][7] = -TORRE;//torres pretas
	InserePeca(posInicial.pretas,-TORRE,7,0,&posInicial);
	InserePeca(posInicial.pretas,-TORRE,7,7,&posInicial);
	
   //[0][1] = [0][6] = CAVALO; //cavalos brancos
    InserePeca(posInicial.brancas,CAVALO,0,1,&posInicial); 
    InserePeca(posInicial.brancas,CAVALO,0,6,&posInicial); 
    
	//[7][1] = [7][6] = -CAVALO;//cavalos pretos
	InserePeca(posInicial.pretas,-CAVALO,7,1,&posInicial);
	InserePeca(posInicial.pretas,-CAVALO,7,6,&posInicial);
	
    //[0][2] = [0][5] = BISPO;//bispos brancos
    InserePeca(posInicial.brancas,BISPO,0,2,&posInicial); 
    InserePeca(posInicial.brancas,BISPO,0,5,&posInicial); 
    
	//[7][2] = [7][5] = -BISPO;//bispos pretos
 	InserePeca(posInicial.pretas,-BISPO,7,2,&posInicial);
 	InserePeca(posInicial.pretas,-BISPO,7,5,&posInicial);
 	
    //[0][3] = RAINHA;//rainha branca
    InserePeca(posInicial.brancas,RAINHA,0,3,&posInicial);

	//[0][4] = REI;//rei branco
    InserePeca(posInicial.brancas,REI,0,4,&posInicial);
	
    //[7][3] = -RAINHA;//rainha preta
    InserePeca(posInicial.pretas,-RAINHA,7,3,&posInicial);
    
	//[7][4] = -REI;//rei preto
    InserePeca(posInicial.pretas,-REI,7,4,&posInicial);
    
    posInicial.qtdPretas=16;
	posInicial.qtdBrancas=16;
	posInicial.jogVez = 1;
	
    return posInicial;
}

void DesenhaTabuleiro(struct Posicao atual){
    system("cls");
	Sleep(500);
	
    printf("    +---+---+---+---+---+---+---+---+\n");
    for (int i=7;i>=0;i--){
        printf("%d   |",i+1);
        for (int j=0;j<8;j++){
            
            if (atual.tab[i][j]!=NULL)
			{
				AjustaCor(atual.tab[i][j]->codigo);
				if(atual.tab[i][j]->codigo<0)
				{
					printf("%d",atual.tab[i][j]->codigo);
				}else
				{
					printf(" %d",atual.tab[i][j]->codigo);
				}
			}else{
				printf("  ");
			}
            ResetCor();
            printf(" |");
        }
        printf("\n    +---+---+---+---+---+---+---+---+\n");
    }
    printf("      1   2   3   4   5   6   7   8 \n");
    
    printf("\n\n Negativo = pretas; Positivo = brancas\n 1= Peão; 2= Cavalo; 3= Bispo;\n 4= Torre; 5= Dama; 6= Rei;\n\n");
}

void *CalculaPeao(struct Jogada *lista,int linha,int coluna,struct Posicao posAtual){
	int peca = posAtual.tab[linha][coluna]->codigo;
	
    if (linha+peca>=0 && linha+peca<=7 ){//não está na primeira nem na última linha
        if (posAtual.tab[linha+peca][coluna] == NULL){ //pode avancar
            InsereJogada(lista,linha+peca,coluna,linha,coluna);
        }
        
		if(posAtual.tab[linha+peca][coluna-1]!=NULL && posAtual.tab[linha+peca][coluna+1] != NULL){
		
	        if (coluna>0 && (posAtual.tab[linha+peca][coluna-1]->codigo)*peca<0){ //verificar captura na esquerda
	            InsereJogada(lista,linha+peca,coluna-1,linha,coluna); 
	        }
	        if (coluna<7 && (posAtual.tab[linha+peca][coluna+1]->codigo)*peca<0){//verificar captura na direita
	            InsereJogada(lista,linha+peca,coluna+1,linha,coluna); 
	        }  
	    }
    }
}

void *CalculaCavalo(struct Jogada *lista, int linha, int coluna,struct Posicao posAtual){
    int peca = posAtual.tab[linha][coluna]->codigo;
	
    if (linha<6){ //duas linhas acima
        if (coluna<7 && posAtual.tab[linha+2][coluna+1] == NULL){ //direita
            InsereJogada(lista, linha+2, coluna+1,linha,coluna); 
        }else if(coluna<7 && (posAtual.tab[linha+2][coluna+1]->codigo)*peca<0){
        	InsereJogada(lista, linha+2, coluna+1,linha,coluna); 
		}
		
        if (coluna>0 && posAtual.tab[linha+2][coluna-1] == NULL){ //esquerda
            InsereJogada(lista,linha+2,coluna-1,linha,coluna); 
        }else if(coluna>0 && (posAtual.tab[linha+2][coluna-1]->codigo)*peca<0){
        	InsereJogada(lista,linha+2,coluna-1,linha,coluna);
		}
    }
    if (linha<7){//uma linha acima
        if (coluna<6 && posAtual.tab[linha+1][coluna+2] == NULL){ //duas casas à direita
            InsereJogada(lista,linha+1,coluna+2,linha,coluna);          
        }else if(coluna<6 && (posAtual.tab[linha+1][coluna+2]->codigo)*peca<0){
        	InsereJogada(lista,linha+1,coluna+2,linha,coluna);
		}
		
        if (coluna>1 && posAtual.tab[linha+1][coluna-2]== NULL){ //duas casas à esquerda
            InsereJogada(lista,linha+1,coluna-2,linha,coluna);             
        }else if (coluna>1 && (posAtual.tab[linha+1][coluna-2]->codigo)*peca<0) {
        	InsereJogada(lista,linha+1,coluna-2,linha,coluna);
		}
    }
    if (linha>1){ //duas linhas abaixo
        if (coluna<7 && posAtual.tab[linha-2][coluna+1] == NULL){ //direita
            InsereJogada(lista,linha-2,coluna+1,linha,coluna);             
        }else if (coluna<7 && (posAtual.tab[linha-2][coluna+1]->codigo)*peca<0) {
        	InsereJogada(lista,linha-2,coluna+1,linha,coluna);
		}
		
        if (coluna>0 && posAtual.tab[linha-2][coluna-1] == NULL){ //esquerda
            InsereJogada(lista,linha-2,coluna-1,linha,coluna); 
        }else if (coluna>0 && (posAtual.tab[linha-2][coluna-1]->codigo)*peca<0){
        	InsereJogada(lista,linha-2,coluna-1,linha,coluna);
		}
    }
    if (linha>0){//uma linha abaixo
        if (coluna<6 && posAtual.tab[linha-1][coluna+2] == NULL){ //duas casas à direita
            InsereJogada(lista,linha-1,coluna+2,linha,coluna); 
        }else if (coluna<6 && (posAtual.tab[linha-1][coluna+2]->codigo)*peca<=0) {
        	InsereJogada(lista,linha-1,coluna+2,linha,coluna); 
		}
		
        if (coluna>1 &&posAtual.tab[linha-1][coluna-2] == NULL){ //duas casas à esquerd
            InsereJogada(lista,linha-1,coluna-2,linha,coluna); 
        }else if (coluna>1 && (posAtual.tab[linha-1][coluna-2]->codigo)*peca<=0) {
        	InsereJogada(lista,linha-1,coluna-2,linha,coluna); 
		}
    }
}

void *CalculaBispo(struct Jogada *lista, int linha, int coluna,struct Posicao posAtual){
    int peca = posAtual.tab[linha][coluna]->codigo;
    int k=0;
	
    do{//diagonal superior direita
        k++;
        if (linha+k<8 && coluna+k<8 && posAtual.tab[linha+k][coluna+k] == NULL){
            InsereJogada(lista,linha+k,coluna+k, linha, coluna);
        }else if(linha+k<8 && coluna+k<8 && posAtual.tab[linha+k][coluna+k]->codigo*peca<0){
        	InsereJogada(lista,linha+k,coluna+k, linha, coluna);
		}
    }while (linha+k<8 && coluna+k<8 && posAtual.tab[linha+k][coluna+k]==NULL);

    k=0;
    do{//diagonal superior esquerda
        k++;
        if (linha+k<8 && coluna-k>=0 && posAtual.tab[linha+k][coluna-k] == NULL){
            InsereJogada(lista,linha+k,coluna-k, linha, coluna); 
        }else if (linha+k<8 && coluna-k>=0 && posAtual.tab[linha+k][coluna-k]->codigo*peca<0 ) {
        	InsereJogada(lista,linha+k,coluna-k, linha, coluna);
		}
    }while (linha+k<8 && coluna-k>=0 && posAtual.tab[linha+k][coluna-k]==NULL);

    k=0;
    do{//diagonal inferior direita
        k++;
        
        if (linha-k>=0 && coluna+k<8 && posAtual.tab[linha-k][coluna+k] == NULL){
            InsereJogada(lista,linha-k,coluna+k, linha, coluna);
        }else if(linha-k>=0 && coluna+k<8 && posAtual.tab[linha-k][coluna+k]->codigo*peca<0) {
        	InsereJogada(lista,linha-k,coluna+k, linha, coluna);
		}
    }while (linha-k>=0 && coluna+k<8 && posAtual.tab[linha-k][coluna+k]==NULL);

    k=0;
    do{//diagonal inferior direita
        k++;
        if (linha-k>=0 && coluna-k>=0 && posAtual.tab[linha-k][coluna-k] == NULL){
            InsereJogada(lista,linha-k,coluna-k, linha, coluna); 
        }else if (linha-k>=0 && coluna-k>=0 && posAtual.tab[linha-k][coluna-k]->codigo*peca<0) {
        	InsereJogada(lista,linha-k,coluna-k, linha, coluna); 
		}
    }while (linha-k>=0 && coluna+k>=0 && posAtual.tab[linha-k][coluna-k]==NULL);

}

void *CalculaTorre(struct Jogada *lista,int linha,int coluna,struct Posicao posAtual){
    
	int peca = posAtual.tab[linha][coluna]->codigo;
    int k=0;

    do{//coluna acima
        k++;
        if (linha+k<8 && posAtual.tab[linha+k][coluna] == NULL){
            InsereJogada(lista,linha+k,coluna,linha,coluna);
        }else if (linha+k<8 && posAtual.tab[linha+k][coluna]->codigo*peca<0) {
        	InsereJogada(lista,linha+k,coluna,linha,coluna);
		}
    }while(linha+k<8 && posAtual.tab[linha+k][coluna]==NULL);
	
    k=0;
    do{//coluna abaixo
        k++;
        if (linha-k>=0 && posAtual.tab[linha-k][coluna]== NULL){
            InsereJogada(lista,linha-k,coluna,linha,coluna);
        }else if (linha-k>=0 && posAtual.tab[linha-k][coluna]->codigo*peca<0){
        	InsereJogada(lista,linha-k,coluna,linha,coluna);
		}
    }while(linha-k>=0 && posAtual.tab[linha-k][coluna]==NULL);

    k=0;
    do{//linha direita
        k++;
        if (coluna+k<8 && posAtual.tab[linha][coluna+k] == NULL){
            InsereJogada(lista,linha,coluna+k,linha,coluna);
        }else if (coluna+k<8 && posAtual.tab[linha][coluna+k]->codigo*peca<0){
        	InsereJogada(lista,linha,coluna+k,linha,coluna);
		}
    }while(coluna+k<8 && posAtual.tab[linha][coluna+k]==NULL);

    k=0;
    do{//linha esquerda
        k++;
        if (coluna-k>=0 && posAtual.tab[linha][coluna-k] == NULL){
        	InsereJogada(lista,linha,coluna-k,linha,coluna);
        }else if(coluna-k>=0 && posAtual.tab[linha][coluna-k]->codigo*peca<=0) {
        	InsereJogada(lista,linha,coluna-k,linha,coluna);
		}
    }while(coluna-k>=0 && posAtual.tab[linha][coluna-k]==NULL); 
}

void *CalculaRei(struct Jogada *lista, int linha, int coluna,struct Posicao posAtual){
    
    int peca = posAtual.tab[linha][coluna]->codigo;
	
    if (linha<7){//linha de cima
        if (posAtual.tab[linha+1][coluna]== NULL){//mesma coluna
            InsereJogada(lista,linha+1,coluna, linha, coluna); 
        }else if (posAtual.tab[linha+1][coluna]->codigo*peca<0) {
        	InsereJogada(lista,linha+1,coluna, linha, coluna);
		}
        
        if (posAtual.tab[linha+1][coluna+1] == NULL){//superior direita
            InsereJogada(lista,linha+1,coluna+1, linha, coluna); 
        }else if (coluna<7 && posAtual.tab[linha+1][coluna+1]->codigo*peca<0){
        	InsereJogada(lista,linha+1,coluna+1, linha, coluna); 
		}
        
        if (posAtual.tab[linha+1][coluna-1] == NULL){//superior esquerda
            InsereJogada(lista,linha+1,coluna-1, linha, coluna); 
        }else if (coluna>=0 && posAtual.tab[linha+1][coluna-1]->codigo*peca<0) {
        	InsereJogada(lista,linha+1,coluna-1, linha, coluna);
		}
    }

    if (linha>0){//linha de baixo
        if (posAtual.tab[linha-1][coluna] == NULL){//mesma coluna
            InsereJogada(lista,linha-1,coluna, linha, coluna); 
        }else if (posAtual.tab[linha-1][coluna]->codigo*peca<0) {
        	InsereJogada(lista,linha-1,coluna, linha, coluna);
		}
        
        if (coluna<7 && posAtual.tab[linha-1][coluna+1]== NULL){//inferior direita
            InsereJogada(lista,linha-1,coluna+1, linha, coluna); 
        }else if (coluna<7 && posAtual.tab[linha-1][coluna+1]->codigo*peca<0 ) {
            InsereJogada(lista,linha-1,coluna+1, linha, coluna); 
		}
        
        if (coluna>=0 && posAtual.tab[linha-1][coluna-1] == NULL ){//inferior esquerda
            InsereJogada(lista,linha-1,coluna-1, linha, coluna); 
        }else if (coluna>=0 && posAtual.tab[linha-1][coluna-1]->codigo*peca<0) {
            InsereJogada(lista,linha-1,coluna-1, linha, coluna); 
		}
    }

    if (coluna<7 && posAtual.tab[linha][coluna+1] == NULL ){ //mesma linha, casa da direita
        InsereJogada(lista,linha,coluna+1, linha, coluna); 
    }else if (coluna<7 && posAtual.tab[linha][coluna+1]->codigo*peca<0) {
        InsereJogada(lista,linha,coluna+1, linha, coluna); 
	}

    if (coluna>0 && posAtual.tab[linha][coluna-1] == NULL){ //mesma linha, casa da esquerda
        InsereJogada(lista,linha,coluna-1, linha, coluna); 
    }else if (coluna>0 && posAtual.tab[linha][coluna-1]->codigo*peca<0) {
        InsereJogada(lista,linha,coluna-1, linha, coluna); 
	}
}

void EscolhePeca(int tab[8][8],int *linha, int *coluna){
    do{
        printf("Digite a linha e a coluna da peça a ser movida:\n");
        scanf("%d %d",linha,coluna); //lê valores de 1 a 8
        (*linha)--; //converte para valores de 0 a 7
        (*coluna)--;
        if (tab[*linha][*coluna]==0){
            printf(">Essa peça não é sua ou não há peça nessa casa, por favor escolha outra!!!\n");
        }
    }while (tab[*linha][*coluna]==0);
}

struct Jogada *CalculaMovimentosPossiveis(struct Posicao posAtual) {
	struct Jogada *jogadas = CriaListaJogada();  
	struct Peca *aux;
	struct Peca *inicio;
	
	if(posAtual.jogVez == 1){
		aux = posAtual.brancas->prox;
		inicio = posAtual.brancas;
	}else {
		aux = posAtual.pretas->prox;
		inicio = posAtual.pretas;
	}
	while(aux!=inicio)
		{
			aux->ataques = 0;
			switch(abs(aux->codigo))
			{
				case PEAO: CalculaPeao(jogadas,aux->linha,aux->coluna,posAtual); break;
				case CAVALO: CalculaCavalo(jogadas,aux->linha,aux->coluna,posAtual); break;
				case BISPO: CalculaBispo(jogadas,aux->linha,aux->coluna,posAtual); break;
				case TORRE: CalculaTorre(jogadas,aux->linha,aux->coluna,posAtual); break;
				case RAINHA: CalculaTorre(jogadas,aux->linha,aux->coluna,posAtual);
							CalculaBispo(jogadas,aux->linha,aux->coluna,posAtual);
							break;
				case REI: CalculaRei(jogadas,aux->linha,aux->coluna,posAtual); break;
			}
			aux=aux->prox;
		} 
	return jogadas;
}

void ImprimeJogadasPos(struct Jogada *lista) {
	struct Jogada *aux= lista->prox;
	while(aux!=lista){
		printf("Linha %d coluna %d para %d %d\n",aux->deLinha,aux->deColuna,aux->paraLinha,aux->paraColuna);
		aux=aux->prox;
	}
}

int EscolheJogada(int qtd,struct Jogada jogs[]){
    int op;
    do{
        for (int i=0;i<qtd;i++){
            printf("> Opção de jogada %2d: mover para linha %d coluna %d\n",i+1,jogs[i].paraLinha+1,jogs[i].paraColuna+1);
            if ( (i+1) % 3 == 0){
                printf("\n");
            }
        }
        printf("\n> Escolha uma das opções(digite o número):\n");
        scanf("%d",&op);
    }while (op<1 || op>qtd);
    return op;
}

int ExecutaJogada(int tab[8][8],struct Jogada jog){
    int resp=0, peca = tab[jog.deLinha][jog.deColuna];

    tab[jog.deLinha][jog.deColuna] = 0; //tira a peça

    if (abs(tab[jog.paraLinha][jog.paraColuna])==REI) //verifica se o rei adversário será capturado
        resp = peca; //resp indica quem será vencedor

    tab[jog.paraLinha][jog.paraColuna] = peca; //coloca a peça na nova posição

    return resp;
}

int main(){
	
	setlocale(LC_ALL,"");
    int vencedor=0,deLinha,deColuna,paraLinha,paraColuna,escolha;
    int qtdJogadas;
    char iniciar[10];
    struct Jogada *jogadas;
    struct Posicao posAtual;

    printf("---------- Bem vindo! ----------\n");
    printf("> Pronto para vencer Beth Harmon?\n\n\nDigite iniciar para gerar o tabuleiro!\n");
    scanf("%s",iniciar);
    
    if(strcmp(iniciar,"iniciar") ==0){
        system("cls");
        posAtual = IniciaTabuleiro();
        DesenhaTabuleiro(posAtual);
        jogadas=CalculaMovimentosPossiveis(posAtual);
        struct Jogada *escolhida = NULL;
        while(escolhida == NULL){
	        printf("> Digite a coordenada (Linha e Coluna) da peça que quer mover:\n");
	        scanf("%d %d",&deLinha,&deColuna);
			printf("> Agora digite a coordenada da casa de destino:\n");
			scanf("%d %d",&paraLinha,&paraColuna);
	        deLinha--; deColuna--; paraLinha--; paraColuna--;
	        escolhida = BuscaJogada(jogadas,paraLinha,paraColuna,deLinha,deColuna);
	        if(escolhida == NULL){
	        	printf("Opção inválida,tente novamente!\n");
			}
        }
        printf("de %d %d para %d %d\n",escolhida->deLinha+1,escolhida->deColuna+1,escolhida->paraLinha+1,escolhida->paraColuna+1);
    }

   /* while (vencedor==0){
        DesenhaTabuleiro(posAtual);
        EscolhePeca(tab,&linha,&coluna);
        qtdJogadas = CalculaJogadas(tab,linha,coluna,jogadas);
        if (qtdJogadas>0){
            escolha = EscolheJogada(qtdJogadas,jogadas);
            vencedor = ExecutaJogada(tab,jogadas[escolha-1]);
        }else{
			printf("> Não há jogadas disponíveis para essa peça.");
    	}
	}
    if (vencedor>0){
        printf("As brancas venceram!");
    }else{
    	printf("As pretas venceram!");
	}*/
    return 0;
}
